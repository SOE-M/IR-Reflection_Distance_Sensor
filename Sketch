

/*
  Design for an IR distance sensor, making use of 38 kHz IR remote receiver TSOP2138 and the Arduino Uno .
  
  For this project a 38 kHz IR receiver TSOP2138 and an IR-LED in reflection arrangement were used. 
  Make sure to screen lateral emission from the IR-LED towards the receiver.
  This sketch makes use of the timer 1 settings: 
  The clock of timer 1 is set to 3906,3 Hz, This setting affects the PWM frequency for Pin 9 and Pin 10.
  This sketch also makes use of the timer 2 settings:
  Timer 2 OC2A register is used in toggle mode, as a consequence Pin 3 and Pin 11 are not available for the PWM output analogWrite() function!
  
  This distance measuring system makes use of the signal detection sensitivity of the TSOP2138 depending on the 38 kHz band-pass filter characteristics.
  A kind of slope detection on the 38 kHz band-pass filter transmission curve is used by changing the output pulse frequency of the IR LED.
  The output frequncy is tuned toward the center frequency of the TSOP2138 until a signal is received. After a brief pause the frequency is then tuned higher,
  away from the center frequency until detection is lost. after another brief pause the frequency is again lowered towards the center frequency until the signal is detected,
  and so on. As a result of this arrangement the frequency jumps continuously around the border of detection.
  The adjustment values of the signal period of the output frequency are sampled and filtered in a first order low pass IIR filter to obtain the average value.
  This average value has a linear relation to the distance of the reflected IR light beam from the IR LED. 
  Note! Not all types of 38 kHz IR remote receiver can be used succesfully in this way! The dutycycle of the IR receiver must be at least 50%.
  
  The frequency range settings in this sketch must be tuned to the specific characteristics of the 38 kHz band-pass filter of the used IR receiver.
  The detection range may be changed by adjusting the current through the IR LED, make use of a switching transistor to boost the current if needed.

  Marcel van Soest 
  09-01-2016
*/

const byte IRLEDpin = 11;     // Pin to connect to the IR LED, output (Timer 2 "A" output: OC2A) 
const byte inPin = 12;        // Pin to connect to the signal from 38 kHz IR-receiver, input
const byte Max = 223;         // maximum value for OCR2A register, setting of minimum frequency, adjusting to maximum transmission of the 38 kHz bandfilter of the IR-sensor
const byte Min = 200;         // minimum value voor OCR2A register, setting of the maximum frequency, adjusting to the minimal value resulting in a correct distance measurement
volatile int detValue = 0;    // variable needed to adjust the output frequency of the IR LED                             
volatile long result = 0;     // variable holding the result of sensor signal calculations
volatile long sum = 0;        // variable used for the IIR first order lowpass filter 
volatile boolean state = LOW; // actual signal from the IR-receiver
volatile boolean oldState = LOW; // previous signal from the IR-receiver


// Timer 1 Interrupt routine, is being called upon four times a millisecond: 
SIGNAL(TIMER1_COMPA_vect) 
{
  oldState = state;
  state = digitalRead(inPin); 
  if (!(state ^ oldState)){   // As long as there is no change in detection, adjust the IR LED output frequency, else mark time.
    if (state){ 
      detValue ++;            // The signal from the IR receiver is used with negative feedback to adjust the ouput frequency of thr IR signal.
      if (detValue > Max){    // This value is to be adjusted for maximum sensitivity of the 38 kHz IR receiver.
        detValue = Max;
      }
    }
    else {
      detValue --;
      if (detValue < Min){    // The shortest period time (highest frequency) resulting in a correct (minimal) distance maesurement. 
        detValue = Min;
      }
    }
    OCR2A = detValue;         // adjusting the output frequency
  }  
  sum = (sum - result) + ((detValue - Min) << 10); // IIR low pass filter, tau is: devider / (samples/s) = 256/3906 = 0,065 s. Bitshift (* 2^10), realising a precise calculation without the use of floating point numbers
  result = sum >> 8;          // (sum / devider), calculation of IIR filter output signal, a bitshift (* 2^-8) realises a division (making use of a bitshift for a fast calculation).                            
}

// function distance(): calculates the distance from the result of the timer 1 interrupt routine
float distance(void){ 
  noInterrupts();  
  float Length = float(result) / 1024.0;  // calculating a length, with correction for the earlier applied bitshift (timer 1 interrupt routine)
  interrupts();
  return(Length);           
}

void setup() {
  pinMode (IRLEDpin, OUTPUT); 
  pinMode(inPin, INPUT);
  Serial.begin(9600);
  // set up Timer 1                              
  OCR1A = 0xAF;               // Timer1  - choose an arbitrary value and call the "Compare A" function 
  TIMSK1 |= _BV(OCIE1A);
  TCCR1B = TCCR1B & 0b11111000 | 0x02;  // timer 1 clock divisor 8 voor 3906,3 Hz. Every 256 us the interrupt routine is called upon.
  // set up Timer 2
  TCCR2A = _BV (COM2A0) | _BV(WGM21);  // CTC, toggle OC2A on Compare Match, the IR-LED blinks
  TCCR2B = _BV (CS20);        // no prescaler, full clock frequency: 16 MHz. 
  OCR2A =  210;               // compare A register value (210 * clock speed) 210 / (16*10^6) = 13.125 nS,
                              // therefore the frequency is 1 / (2 * 13.125) = 38095 Hz. This value will be continuously updated in the interrupt routine.  
} 


void loop() {
  Serial.println(distance()); // the measured distance is displayed in the serial monitor
  delay(100);                 // use a delay if preferred
}
